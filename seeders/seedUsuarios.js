const bcrypt = require("bcrypt");
const pool = require("../db/connection");

// Funci√≥n para generar datos aleatorios
const generateRandomUser = (index, rol) => {
  const nombres = [
    'Ana', 'Carlos', 'Mar√≠a', 'Jos√©', 'Laura', 'Pedro', 'Carmen', 'Luis', 'Elena', 'Miguel',
    'Isabel', 'Antonio', 'Rosa', 'Francisco', 'Pilar', 'Manuel', 'Teresa', 'Jes√∫s', 'Mercedes', '√Ångel',
    'Dolores', 'Rafael', 'Antonia', 'David', 'Josefa', 'Juan', 'Francisca', 'Daniel', 'Cristina', 'Javier'
  ];
  
  const apellidos = [
    'Garc√≠a', 'Rodr√≠guez', 'Gonz√°lez', 'Fern√°ndez', 'L√≥pez', 'Mart√≠nez', 'S√°nchez', 'P√©rez', 'G√≥mez', 'Mart√≠n',
    'Jim√©nez', 'Ruiz', 'Hern√°ndez', 'D√≠az', 'Moreno', 'Mu√±oz', '√Ålvarez', 'Romero', 'Alonso', 'Guti√©rrez'
  ];

  const nombre = nombres[Math.floor(Math.random() * nombres.length)];
  const apellido = apellidos[Math.floor(Math.random() * apellidos.length)];
  const email = `${nombre.toLowerCase()}.${apellido.toLowerCase()}${index}@bechapra.com`;

  return {
    nombre: `${nombre} ${apellido}`,
    email,
    password: `${rol}123`,
    rol
  };
};

const usuariosBase = [
  {
    nombre: "Leonardo Admin",
    email: "admin@bechapra.com",
    password: "admin123",
    rol: "admin_general",
  }
];

async function seedUsuarios() {
  try {
    console.log('üå± Iniciando seeding de usuarios...');

    // Limpiar tabla usuarios (opcional)
    const clearTable = process.argv.includes('--clear');
    if (clearTable) {
      await pool.query('DELETE FROM usuarios WHERE email != "admin@bechapra.com"');
      console.log('üßπ Tabla usuarios limpiada (excepto admin principal)');
    }

    const usuarios = [...usuariosBase];

    // Generar 30 solicitantes
    for (let i = 1; i <= 300; i++) {
      usuarios.push(generateRandomUser(i, 'solicitante'));
    }

    // Generar 20 aprobadores
    for (let i = 1; i <= 200; i++) {
      usuarios.push(generateRandomUser(i, 'aprobador'));
    }

    // Generar 15 pagadores
    for (let i = 1; i <= 150; i++) {
      usuarios.push(generateRandomUser(i, 'pagador_banca'));
    }

    let creados = 0;
    let existentes = 0;

    for (const usuario of usuarios) {
      try {
        // Verificar si ya existe
        const [existing] = await pool.query(
          "SELECT id_usuario FROM usuarios WHERE email = ?",
          [usuario.email]
        );

        if (existing.length > 0) {
          existentes++;
          continue;
        }

        const hashedPassword = await bcrypt.hash(usuario.password, 10);

        await pool.query(
          `INSERT INTO usuarios (nombre, email, password, rol)
           VALUES (?, ?, ?, ?)`,
          [usuario.nombre, usuario.email, hashedPassword, usuario.rol]
        );

        creados++;
        console.log(`‚úÖ Usuario ${usuario.rol} creado: ${usuario.email}`);
      } catch (error) {
        console.error(`‚ùå Error al insertar ${usuario.email}:`, error.message);
      }
    }

    console.log(`\nüìä Resumen del seeding:`);
    console.log(`‚úÖ Usuarios creados: ${creados}`);
    console.log(`‚ö†Ô∏è  Usuarios ya existentes: ${existentes}`);
    console.log(`üìù Total procesados: ${usuarios.length}`);

  } catch (error) {
    console.error('‚ùå Error en seeding de usuarios:', error);
  } finally {
    await pool.end();
    console.log('üîö Conexi√≥n cerrada');
  }
}

// Ejecutar solo si es llamado directamente
if (require.main === module) {
  seedUsuarios();
}

module.exports = seedUsuarios;
